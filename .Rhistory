gather(signature, symbol) %>% drop_na() %>%
mutate(symbol = gsub('\\*', '', symbol))
## run gsea with clusterprofiler
res_symbol <- mek_res %>%
group_by(Symbol) %>% arrange(P.Value) %>% slice(1) %>% ungroup()
ranks_symbol <- sort(setNames(res_symbol$t, res_symbol$Symbol), decreasing = T)
gse_sig <- GSEA(
geneList = ranks_symbol,
TERM2GENE = intestinal_sig,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1
)
## output as tibble
gse_sig_tbl_ilmn <- as_tibble(gse_sig)
## run again for line 19 results only
res_symbol19 <- mek_res19 %>%
group_by(Symbol) %>% arrange(P.Value) %>% slice(1) %>% ungroup()
ranks_symbol19 <- sort(setNames(res_symbol19$t, res_symbol19$Symbol),
decreasing = T)
res_symbol19
ranks_symbol19
head(ranks_symbol19)
gse_sig19 <- GSEA(
geneList = ranks_symbol19,
TERM2GENE = intestinal_sig,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1
)
## output as tibble
gse_sig_tbl_ilmn19 <- as_tibble(gse_sig19)
gseaplot2(
gse_sig19, geneSetID = gse_sig19$ID[.x],
title = paste0(gse_sig19$ID[.x],
' (p = ', round(gse_sig_tbl_ilmn19$pvalue[.x], 3),
'; NES = ', round(gse_sig_tbl_ilmn19$NES[.x], 2), ')')
)
reduce(bc_plots, `+`)
## list of cel files
cel_files <- list.files(here('../../data/gene_expression/mek_inhibitor/MEK_inhibition/'),
full.names = T, pattern = '.CEL')
## parse and normalize
affy_batch <- ReadAffy(filenames = cel_files)
expr_mat <- expresso(
affy_batch,
bgcorrect.method = 'rma',
normalize.method = 'quantiles',
pmcorrect.method = 'pmonly',
summary.method = 'avgdiff'
)
expr_mat <- log(exprs(expr_mat))
## create an annotation for the samples
sample_info <- tibble(names = colnames(expr_mat)) %>%
extract(names, c('line', 'treatment', 'rep'),
regex = '^GSM.+Org_(19T)_(.+?)_R([1,2])_HG.+?', remove = F)
## create an annotation for the probe IDs
load(here('../../data/gene_expression/promise_expr.rda'))
probe_anno <- promise_expr %>% distinct(probe, symbol, entrez)
## confirm that chip model was the same
table(probe_anno$probe %in% rownames(expr_mat))
cel_files <- list.files(here('data/gene_expression/mek_inhibitor/MEK_inhibition/'),
full.names = T, pattern = '.CEL')
## parse and normalize
affy_batch <- ReadAffy(filenames = cel_files)
expr_mat <- expresso(
affy_batch,
bgcorrect.method = 'rma',
normalize.method = 'quantiles',
pmcorrect.method = 'pmonly',
summary.method = 'avgdiff'
)
expr_mat <- log(exprs(expr_mat))
## create an annotation for the samples
sample_info <- tibble(names = colnames(expr_mat)) %>%
extract(names, c('line', 'treatment', 'rep'),
regex = '^GSM.+Org_(19T)_(.+?)_R([1,2])_HG.+?', remove = F)
## create an annotation for the probe IDs
load(here('data/gene_expression/promise_expr.rda'))
probe_anno <- promise_expr %>% distinct(probe, symbol, entrez)
## confirm that chip model was the same
table(probe_anno$probe %in% rownames(expr_mat))
stopifnot(identical(colnames(expr_mat), sample_info$names))
## model matrix for DGE analysis, general meki effect, regress line effects
mm <- model.matrix(~treatment, data = sample_info)
## fit model
fit <- lmFit(expr_mat, mm)
fit <- eBayes(fit)
## make a results table and map probes to gene symbols
mek_res_affy <- topTable(fit, coef = 'treatmentDMSO_+_TRAM', n=Inf) %>%
as_tibble(rownames = 'probe') %>%
left_join(probe_anno)
expr_mat
apply(expr_mat, 1, sd)
apply(expr_mat, 1, sd) == 0
table(apply(expr_mat, 1, sd) == 0)
## exclude 0-variance probes
expr_mat <- expr_mat[apply(expr_mat, 1, var) > 0,]
## model matrix for DGE analysis, general meki effect, regress line effects
mm <- model.matrix(~treatment, data = sample_info)
## fit model
fit <- lmFit(expr_mat, mm)
fit <- eBayes(fit)
table(apply(expr_mat, 1, sd) == 0)
## fit model
fit <- lmFit(expr_mat, mm)
fit <- eBayes(fit)
fit
## make a results table and map probes to gene symbols
mek_res_affy <- topTable(fit, coef = 'treatmentDMSO_+_TRAM', n=Inf) %>%
as_tibble(rownames = 'probe') %>%
left_join(probe_anno)
mek_res_affy
expr_long_affy <- expr_mat %>% as_tibble(rownames = 'probe') %>%
left_join(probe_anno) %>%
pivot_longer(names_to = 'names', values_to = 'expr',
-c(probe, entrez, symbol)) %>%
inner_join(sample_info)
## plot examples
expr_long_affy %>% filter(symbol %in% c('TGFBI', 'DUSP6')) %>%
ggplot(aes(treatment, expr, color = line)) +
geom_jitter(width = 0.2) +
facet_wrap(~ symbol + probe, scales = 'free_y') +
panel_border()
mek_res_affy
## illumina t statistics
mek_ilmn_t <- mek_res %>% group_by(Symbol) %>%
top_n(1, -P.Value) %>% ungroup() %>%
select(symbol = Symbol, illumina = t)
y
## affymetrix
mek_affy_t <- mek_res_affy %>% group_by(symbol) %>%
top_n(1, -P.Value) %>% ungroup() %>%
select(symbol, affymetrix = t)
## compare
mek_ilmn_t %>% inner_join(mek_affy_t) %>%
ggplot(aes(illumina, affymetrix)) +
geom_point() +
geom_abline(linetype = 'dashed') +
ggpubr::stat_cor()
mek_res_affy
## run gsea with clusterprofiler
res_symbol <- mek_res_affy %>%
group_by(symbol) %>% arrange(P.Value) %>% slice(1) %>% ungroup()
ranks_symbol <- sort(setNames(res_symbol$t, res_symbol$symbol), decreasing = T)
head(ranks_symbol)
tail(ranks_symbol)
res_symbol
res_symbol %>% filter(is.na`9symbol`)
res_symbol %>% filter(is.na(symbol))
## run gsea with clusterprofiler
res_symbol <- mek_res_affy %>%
filter(!is.na(symbol)) %>%
group_by(symbol) %>% arrange(P.Value) %>% slice(1) %>% ungroup()
ranks_symbol <- sort(setNames(res_symbol$t, res_symbol$symbol), decreasing = T)
head(ranks_symbol)
gse_sig_affy <- GSEA(
geneList = ranks_symbol,
TERM2GENE = intestinal_sig,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1
)
## output as tibble
gse_sig_tbl_affy <- as_tibble(gse_sig_affy)
gse_sig_tbl_affy
## examples from tianzuo's paper
expr_long_affy %>% filter(symbol %in% c('KRT20', 'KRT5', 'TFF1', 'CD44', 'EPHB2', 'ASCL2', 'OLFM4', 'BIRC5', 'AXIN2')) %>%
ggplot(aes(treatment, expr, color = line)) +
geom_jitter(width = 0.2) +
facet_wrap(~ symbol + probe, scales = 'free_y') +
panel_border()
expr_mat
## sample info (line + treatment)
sample_info <- tibble(names = colnames(expr_mat)) %>%
mutate(treatment = ifelse(grepl('TRAM|T10', names), 'MEKi', 'DMSO'),
line = gsub('^\"Organoid ', '', names)) %>%
separate(line, c('line', 'rest'), extra = 'merge', sep = ' ') %>%
mutate(line = gsub('\"', '', gsub('T', '', line)),
group = paste(treatment, line, sep='_')) %>%
select(-rest)
sample_info
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F, results = 'hide')
# Chunk 2
library(MEKWnt2018)
library(affy)
library(limma)
library(clusterProfiler)
library(ReactomePA)
library(enrichplot)
library(org.Hs.eg.db)
library(pheatmap)
library(reshape2)
library(tidyverse)
library(patchwork)
library(cowplot)
library(here)
# Chunk 3
filter <- dplyr::filter
select <- dplyr::select
rename <- dplyr::rename
slice <- dplyr::slice
# Chunk 4
theme_set(theme_cowplot())
# Chunk 5
## list of cel files
data('expr_organoids_norm', package='MEKWnt2018')
# Chunk 6
expr_mat <- expr_organoids_norm %>%
map(exprs) %>%
map(~ as_tibble(.x, rownames = 'probe')) %>%
reduce(inner_join) %>%
as.data.frame() %>% column_to_rownames('probe')
## exclude line 15 because it was not screened
expr_mat <- expr_mat[,!grepl('Organoid 15', colnames(expr_mat))]
# Chunk 7
expr_mat <- expr_mat[,!grepl(' P5 | P10 ', colnames(expr_mat))]
## visualize as heatmap
pheatmap(cor(expr_mat))
sample_info
## sample info (line + treatment)
sample_info <- tibble(names = colnames(expr_mat)) %>%
mutate(treatment = ifelse(grepl('TRAM|T10', names), 'MEKi', 'DMSO'),
line = gsub('^\"Organoid ', '', names)) %>%
separate(line, c('line', 'rest'), extra = 'merge', sep = ' ') %>%
mutate(line = gsub('\"', '', gsub('T', '', line)),
group = paste(treatment, line, sep='_')) %>%
select(-rest)
sample_info
expr_mat
sample_info
expr_organoids_norm
expr_organoids_norm$o19_norm
exprs(expr_organoids_norm$o19_norm)
colnames(exprs(expr_organoids_norm$o19_norm))
expr_mat_19 <- exprs(expr_organoids_norm$o19_norm)
present_19 <- detectionCall(expr_mat_19)
expr_mat_19 <- expr_mat_19[present_19 > 0,]
expr_mat_19
expr_mat_19 <- exprs(expr_organoids_norm$o19_norm)
present_19 <- detectionCall(expr_organoids_norm$o19_norm)
present_19
expr_mat_19 <- expr_mat_19[present_19 > 0,]
expr_mat_19
nrow(expr_mat_19)
nrow(exprs(expr_organoids_norm$o19_norm))
tibble(names = colnames(expr_mat_19))
tibble(names = colnames(expr_mat_19)) %>% extract(names, c('treatment', 'rep'), regex = '^.*19T (.+)(R\\d).+$')
tibble(names = colnames(expr_mat_19)) %>% extract(names, c('treatment', 'rep'), regex = '^.*19T (.+) (R\\d).+$', remove = F)
sample_info_19 <- tibble(names = colnames(expr_mat_19)) %>%
extract(names, c('treatment', 'rep'),
regex = '^.*19T (.+) (R\\d).+$', remove = F)
sample_info_19
mm19 <- model.matrix(~0 + treatment, data = sample_info_19)
## fit model  all lines
fit19 <- lmFit(expr_mat_19, mm19)
colnames(mm19)
## fit additional contrast model for line 19 only
contr <- makeContrasts(treatmentT10 - treatmentDMSO,
levels = colnames(mm19))
sample_info_19
sample_info_19 <- tibble(names = colnames(expr_mat_19)) %>%
extract(names, c('treatment', 'rep'),
regex = '^.*19T (.+) (R\\d).+$', remove = F) %>%
mutate(treatment = gsub(' ', '', treatment))
## fit additional contrast model for line 19 only
contr <- makeContrasts(treatmentT10 - treatmentDMSO,
levels = colnames(mm19))
mm19 <- model.matrix(~0 + treatment, data = sample_info_19)
## fit model
fit19 <- lmFit(expr_mat_19, mm19)
## fit additional contrast model for line 19 only
contr <- makeContrasts(treatmentT10 - treatmentDMSO,
levels = colnames(mm19))
contr
fit19 <- contrasts.fit(fit19, contr)
fit19 <- eBayes(fit19)
head(coef(fit19))
## make a results table and map probes to gene symbols
mek_res19 <- topTable(fit19, coef = 'treatmentT10 - treatmentDMSO', n = Inf) %>%
as_tibble(rownames = 'ProbeID') %>%
left_join(probe_mapping_ilmn)
mek_res19
mek_res19
## run again for line 19 results only
res_symbol19 <- mek_res19 %>%
group_by(Symbol) %>% arrange(P.Value) %>% slice(1) %>% ungroup()
ranks_symbol19 <- sort(setNames(res_symbol19$t, res_symbol19$Symbol),
decreasing = T)
gse_sig19 <- GSEA(
geneList = ranks_symbol19,
TERM2GENE = intestinal_sig,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1
)
## output as tibble
gse_sig_tbl_ilmn19 <- as_tibble(gse_sig19)
bc_plots <- map(1:nrow(gse_sig_tbl_ilmn19), ~ {
gseaplot2(
gse_sig19, geneSetID = gse_sig19$ID[.x],
title = paste0(gse_sig19$ID[.x],
' (p = ', round(gse_sig_tbl_ilmn19$pvalue[.x], 3),
'; NES = ', round(gse_sig_tbl_ilmn19$NES[.x], 2), ')')
)
})
reduce(bc_plots, `+`)
## run again for line 19 results only
res_symbol19 <- mek_res19 %>%
group_by(Symbol) %>% arrange(P.Value) %>% slice(1) %>% ungroup()
ranks_symbol19 <- sort(setNames(res_symbol19$t, res_symbol19$Symbol),
decreasing = T)
gse_sig19 <- GSEA(
geneList = ranks_symbol19,
TERM2GENE = intestinal_sig,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1
)
length(ranks_symbol19)
reduce(bc_plots, `+`)
mek_res19
mek_res19 %>% filter(Symbol == 'DUSP6')
mek_res_affy
## plot examples
expr_long %>% filter(Symbol %in% c('KRT20', 'KRT5', 'TFF1', 'CD44', 'EPHB2', 'ASCL2', 'OLFM4', 'BIRC5', 'AXIN2', 'DUSP6')) %>%
ggplot(aes(treatment, expr, color = line)) +
geom_jitter(width = 0.2) +
facet_wrap(~ Symbol + ProbeID, scales = 'free_y') +
panel_border()
mek_res19
## fit model
fit19 <- lmFit(expr_mat_19, mm19)
fit19 <- eBayes(fit19)
## fit additional contrast model for line 19 only
contr <- makeContrasts(treatmentT10 - treatmentDMSO,
levels = colnames(mm19))
fit19 <- contrasts.fit(fit19, contr)
fit19 <- eBayes(fit19)
## make a results table and map probes to gene symbols
mek_res19 <- topTable(fit19, coef = 'treatmentT10 - treatmentDMSO', n = Inf) %>%
as_tibble(rownames = 'ProbeID') %>%
left_join(probe_mapping_ilmn)
mek_res19
nrow(expr_mat_19)
mm19
## fit model
fit19 <- lmFit(expr_mat_19, mm19)
fit19 <- eBayes(fit19)
fit192 <- contrasts.fit(fit19, contr)
fit192 <- eBayes(fit192)
## make a results table and map probes to gene symbols
mek_res19 <- topTable(fit192, coef = 'treatmentT10 - treatmentDMSO', n = Inf) %>%
as_tibble(rownames = 'ProbeID') %>%
left_join(probe_mapping_ilmn)
mek_res19
bc_plots <- map(1:nrow(gse_sig_tbl_affy), ~ {
gseaplot2(
gse_sig_affy, geneSetID = gse_sig_affy$ID[.x],
title = paste0(gse_sig_affy$ID[.x],
' (p = ', round(gse_sig_tbl_affy$pvalue[.x], 3),
'; NES = ', round(gse_sig_tbl_affy$NES[.x], 2), ')')
)
})
reduce(bc_plots, `+`)
bc_plots <- map(1:nrow(gse_sig_tbl_ilmn), ~ {
gseaplot2(
gse_sig, geneSetID = gse_sig$ID[.x],
title = paste0(gse_sig$ID[.x],
' (p = ', round(gse_sig_tbl_ilmn$pvalue[.x], 3),
'; NES = ', round(gse_sig_tbl_ilmn$NES[.x], 2), ')')
)
})
reduce(bc_plots, `+`)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F, results = 'hide')
# Chunk 2
library(limma)
library(clusterProfiler)
library(ReactomePA)
library(enrichplot)
library(org.Hs.eg.db)
library(pheatmap)
library(reshape2)
library(tidyverse)
library(cowplot)
library(here)
# Chunk 3
filter <- dplyr::filter
select <- dplyr::select
rename <- dplyr::rename
slice <- dplyr::slice
# Chunk 4
theme_set(theme_cowplot())
# Chunk 5
load(here('data/gene_expression/promise_expr.rda'))
## annotate phenotype group
solid <- c('D004', 'D007', 'D010', 'D019', 'D020',
'D022', 'D046', 'D054', 'D055')
cystic <- c('D013', 'D018', 'D021', 'D027', 'D030')
## exclude lines 15 and 52 due to potential contamination
promise_expr <- promise_expr %>%
mutate(phenotype = ifelse(line %in% solid, 'solid',
ifelse(line %in% cystic, 'cystic', 'other'))) %>%
filter(phenotype != 'other')
# Chunk 6
## make expr matrix
expr_mat <- promise_expr %>%
distinct(probe, line, date, expr) %>%
acast(probe ~ line + date, value.var = 'expr')
## generate heatmap annotation
anno <- promise_expr %>%
distinct(line, date, batch_large, phenotype) %>%
unite(id, line, date) %>%
mutate_all(as.factor) %>%
as.data.frame() %>% column_to_rownames('id')
## visualize distance matrix
pheatmap(as.matrix(dist(t(expr_mat))),
annotation_row = anno)
## visualize most variable probes
pheatmap(expr_mat[order(apply(expr_mat, 1, sd), decreasing = T)[1:500],],
annotation_col = anno)
expr_mat
promise_expr
promise_expr %>% group_by(symbol, probe) %>% summarise(avg_probe = mean(expr)) %>% ungroup()
promise_expr %>% group_by(symbol, probe) %>% summarise(avg_probe = mean(expr)) %>% ungroup() %>% group_by(symbol) %>% top_n(1, avg_probe) %>% ungroup()
## select most highly expressed probe to represent each gene
select_probes <- promise_expr %>% group_by(symbol, probe) %>%
summarise(avg_probe = mean(expr)) %>% ungroup() %>%
group_by(symbol) %>% top_n(1, avg_probe) %>% ungroup() %>% pull(probe)
select_probes
promise_expr %>% filter(probe %in% select_probes)
promise_expr %>% group_by(line, symbol, probe, phenotype) %>% summarise(expr = mean(expr)) %>% ungroup()
## summarize replicates
gene_expr <- promise_expr %>% group_by(line, symbol, probe, phenotype) %>%
summarise(expr = mean(expr)) %>% ungroup() %>%
filter(probe %in% select_probes)
gene_expr
gene_expr %>% acast(line ~ symbol, value.var = 'expr')
gene_expr
gene_expr
test <- gene_expr  %>% count(line, symbol) %>% filter(n > 1)
test
gene_expr %>% filter(line == 'D004', symbol == 'ABCB1')
select_probes[select_probes %in% c('209993_at', '209994_s_at')]
promise_expr %>% group_by(symbol, probe) %>%
summarise(avg_probe = mean(expr)) %>% ungroup() %>%
group_by(symbol) %>% top_n(1, avg_probe) %>% ungroup() %>% filter(probe %in% c('209993_at', '209994_s_at'))
## exclude ambiguous gene symbols
ambiguous <- gene_expr %>% count(line, symbol) %>% filter(n > 1) %>% pull(symbol)
gene_expr %>% filter(!symbol %in% ambiguous)
gene_expr <- gene_expr %>% filter(!symbol %in% ambiguous)
promise_expr
gene_expr %>% acast(line ~ symbol, value.var = 'expr')
## get to 500 variable genes, do PCA
gene_expr_mat <- gene_expr %>% acast(line ~ symbol, value.var = 'expr')
apply(gene_expr_mat, 1, sd)
dim(gene_expr_mat)
## get to 500 variable genes, do PCA
gene_expr_mat <- gene_expr %>% acast(symbol ~ line, value.var = 'expr')
order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:500]
prcomp(gene_expr_mat[order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:500],])
prcomp(gene_expr_mat[order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:500],])$c
prcomp(gene_expr_mat[order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:500],])$x
pca <- prcomp(t(gene_expr_mat[order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:500],]))
pca$x
as_tibble(pca$x, rownames = 'line')
as_tibble(pca$x, rownames = 'line') %>% select(line, PC1:PC5) %>% inner_join(distinct(gene_expr %>% distinct(line, phenotype)))
gene_expr %>% filter(symbol == 'IGF2')
gene_expr %>% filter(symbol == 'H19)
)
gene_expr %>% filter(symbol == 'H19')
gene_expr %>% filter(symbol == 'IGF2')
promise_expr
promise_expr %>% filter(symbol == 'IGF2')
gene_expr %>% filter(symbol == 'H19')
gene_expr %>% filter(symbol == 'H19') %>% distinct(line, h19 = expr)
## annotate and plot pca results
pca_res <- as_tibble(pca$x, rownames = 'line') %>% select(line, PC1:PC5) %>%
inner_join(distinct(gene_expr %>% distinct(line, phenotype))) %>%
inner_join(gene_expr %>% filter(symbol == 'H19') %>% distinct(line, h19 = expr))
pca_res
pca_res %>%> ggplot(aes(PC1, PC2, color = h19)) + geom_point(size = 2)
pca_res %>% ggplot(aes(PC1, PC2, color = h19)) + geom_point(size = 2)
pca_res %>% ggplot(aes(PC1, PC2, color = h19, shape = phenotype)) + geom_point(size = 2)
pca_res %>% ggplot(aes(PC1, PC2, color = h19, shape = phenotype)) + geom_point(size = 2) + ggrepel::geom_text_repel(aes(label = line))
pca_res %>% ggplot(aes(PC1, PC2, color = h19, shape = phenotype)) +
geom_point(size = 2) +
ggrepel::geom_text_repel(aes(label = line)) +
scale_color_gradient(low = '#cccccc', high = '#111111')
gene_expr_mat
gene_expr_mat[order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:50],]
pheatmap(gene_expr_mat[order(apply(gene_expr_mat, 1, sd), decreasing = T)[1:50],])
BiocManager::install('DeconRNASeq')
library(DeconRNASeq)
data(multi_tissue)
datasets <- x.data[,2:11]
datasets
head(datasets)
hist(sample(datasets, 1e5))
hist(sample(as.numeric(datasets), 1e5))
hist(datasets)
head(unlist(datasets))
hist(unlist(datasets))
signatures <- x.signature.filtered.optimal[,2:6]
signatures
