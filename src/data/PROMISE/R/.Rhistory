if(!endsWith(outfile, "tif") & !endsWith(outfile, "tiff")) {
warning(paste0(
"R is a bit special about how it saves images, so this function only ",
"writes TIFF images. Please make sure that the output filename ends ",
"with *.tif or *.tiff"))
}
dirname(outfile)
outfile = "/Users/jansauer/tmp/outstack.tif"
xdim = dim(img)[1]
ydim = dim(img)[2]
dim(img)
xdim = dim(img)[1]
ydim = dim(img)[2]
num_stacks = dim(img)[3]
num_channels = dim(img)[4]
num_fields = dim(img)[5]
output_img = NULL
output_img = Image(data = 0, dim = c(xdim * 2, ydim * 2, num_channels, num_stacks), colormode = "color")
output_img[1:xdim, 1:ydim,,] = img[,,,,as.numeric(fields_layout[1])]
output_img[(xdim+1):(2*xdim), 1:ydim,,] = img[,,,,as.numeric(fields_layout[2])]
output_img[1:xdim, (ydim+1):(2*ydim),,] = img[,,,,as.numeric(fields_layout[3])]
output_img[(xdim+1):(2*xdim), (ydim+1):(2*ydim),,] = img[,,,,as.numeric(fields_layout[4])]
dim(output_img)
preprocess
outfile
if(preprocess) {
for(ch in seq_len(num_channels)) {
q = quantile(x=output_img[,,ch,], probs=0.999)
output_img[,,ch,][output_img[,,ch,] > q] = q
}
output_img = normalize(output_img)
} else {
output_img = output_img / 65535
}
library(devtools)
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
library(PROMISE)
4608 / 4
4608 / 3
warning(paste0(
"'feature_type' must be one of 'organoids', 'clumps',",
"'foreground', or 'inception'"))
warning(paste0(
"'feature_type' must be one of 'organoids', 'clumps', ",
"'foreground', or 'inception'"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
hdf5key = switch(
feature_type,
"organoids" = c("features", "feature_names", "well_names"),
"clumps" = c("features_clumps", "feature_names_clumps", "well_names_clumps"),
"foreground" = c("features_noseg", "feature_names_noseg", "well_names_noseg"),
"inception" = "inception")
if(is.null(hdf5key)) {
warning(paste0(
"'feature_type' must be one of 'organoids', 'clumps', ",
"'foreground', or 'inception'"))
return(NULL)
}
hdf5key == "inception"
feature_fn = file.path(
featuresdir, platename, sprintf("%s_features.h5", platename))
source(file.path(configdir, "watchdogConfig.R"))
feature_fn = file.path(
featuresdir, "inception",
platename, sprintf("%s_features.h5", platename))
feature_fn
features = data.frame(h5read(file = feature_fn, name = "features"))
feature_names = as.character(seq_len(ncol(features)))
wells = as.character(h5read(file = feature_fn, name = "well_names"))
feature_fn = file.path(
featuresdir, "inception",
platename, sprintf("%s_features_inception.h5", platename))
features = data.frame(h5read(file = feature_fn, name = "features"))
feature_names = as.character(seq_len(ncol(features)))
wells = as.character(h5read(file = feature_fn, name = "well_names"))
colnames(features) = feature_names
wells
gsub(pattern = "_", replacement = "", x = wells)
library(devtools)
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
library(devtools)
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE/")
library(EBImage)
segmap_fn = "~/tmp/tmp_featureextraction/M001K02P009L02_C_12_DNNsegmentation.h5"
segmap_mask = h5read(segmap_fn, "mask")
library(rhdf5)
segmap_mask = h5read(segmap_fn, "mask")
dim(segmap_mask)
unique(as.numeric(segmap_mask))
fld=1
mask = matrix(
as.integer(segmap_mask[,,fld] > 0),
nrow = nrow(segmap_mask),
ncol = ncol(segmap_mask))
dim(mask)
unique(as.numeric(mask))
display(mask)
mask = fillHull(mask)
display(mask)
source('~/.active-rstudio-document')
source(file.path(configdir, "watchdogConfig.R"))
sessionInfo()
segmap_fn = segmentationHdf5Filename(
filedir = file.path(segmentationdir, platename),
platename = platename, row = row, col = col)
platename = "D021T01P905L02"
segmap_fn = segmentationHdf5Filename(
filedir = file.path(segmentationdir, platename),
platename = platename, row = row, col = col)
segmap_mask = h5read(segmap_fn, "mask")
library(rhdf5)
segmap_mask = h5read(segmap_fn, "mask")
dim(segmap_mask)
display(segmap_mask)
EBImage::display(segmap_mask[,,1])
EBImage::display(segmap_mask)
proj_fn = projectionHdf5Filename(
filedir = file.path(hdf5projection, platename),
platename = platename, row = row, col = col)
proj = h5read(proj_fn, "images")
num_fields = dim(proj)[4]
features = vector(mode = "list", length = num_fields)
features_clumps = vector(mode = "list", length = num_fields)
features_noseg = vector(mode = "list", length = num_fields)
img = Image(data = proj[,,,fld], colormode = "color")
library(EBImage)
img = Image(data = proj[,,,fld], colormode = "color")
fld=1
img = Image(data = proj[,,,fld], colormode = "color")
dim(img)
display(img)
img = Image(data = proj[,,,fld], colormode = "color")
mask = matrix(
as.integer(segmap_mask[,,fld] > 0),
nrow = nrow(segmap_mask),
ncol = ncol(segmap_mask))
display(mask)
unique(as.numeric(segmap_mask))
mask_erode = erode(mask, kern = makeBrush(11, "disc"))
display(mask_erode)
mask_erode = erode(mask, kern = makeBrush(11, "disc"))
makeBrush(7, "disc")
makeBrush(9, "disc")
mask_edited = closing(mask, kern = makeBrush(7, "disc"))
display(mask)
display(mask_edited)
display(mask)
display(mask_edited)
display(closing(mask, kern = makeBrush(15, "disc")))
display(closing(mask, kern = makeBrush(25, "disc")))
mask_erode = erode(mask, kern = makeBrush(11, "disc"))
display(mask_erode)
dmap = distmap(mask_erode, "euclidean")
dim(dmap)
display(dmap)
display(normalize(dmap))
range(dmap)
display(dmap >= 15)
15**2*pi
sqrt(1000 / pi)
display(dmap >= 20)
display(dmap >= 0)
display(dmap >= 1)
display(dmap >= 20)
display(dmap >= 1)
display(dmap >= 20)
mask_labeled = propagate(x = mask, seeds = wshed, mask = mask)
wshed = watershed(dmap, tolerance = 15)
mask_labeled = propagate(x = mask, seeds = wshed, mask = mask)
display(normalize(mask_labeled))
display(colorLabels(mask_labeled))
library(devtools)
document(".")
document(".")
document("..")
library(devtools)
document(".")
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE")
install.packages("roxygen2")
install.packages("roxygen2")
library(devtools)
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE")
document("~/Thesis/Projects/PROMISE/watchdog/PROMISE")
library(MaxContrastProjection)
source("http://www.bioconductor.org/biocLite.R")
biocLite("MaxContrastProjection")
dat = array(rnorm(100**2*5), dim = c(100, 100, 5))
library(MaxContrastProjection)
contrastProjection(dat, 20)
dat = dat - min(dat)
contrastProjection(dat, 20)
R
library(fftwtools)
sessionInfo()
plateIndir = "PROMISE-10x-4t-c-16z"
platename = "D026T11P004L11"
row = "A"
col = "01"
configdir = "/collab-ag-fischer/PROMISE/data-10x-4t-c-16z/configdir"
source(file.path(configdir, "watchdogConfig.R"))
filenames = imageFilenames(plateIndir, platename, row, col, configdir)
library(PROMISE)
filenames = imageFilenames(plateIndir, platename, row, col, configdir)
filenames
128 / 4
# Check that all images are present
identifiers = expand.grid(fields, channels, stacks, stringsAsFactors = FALSE)
identifiers
# Create hdf5 file (and folders if necessary)
dir.create(file.path(hdf5dir, platename), showWarnings = FALSE, recursive = TRUE)
file.path(hdf5dir, platename)
h5FileName = hdf5Filename(filedir = file.path(hdf5dir, platename), platename = platename, row = row, col = col)
h5FileName
file_made = h5createFile(h5FileName)
library(rhdf5)
file_made = h5createFile(h5FileName)
file_made
!file_made
# Create datasets
dataset_made = h5createDataset(file = h5FileName, dataset = "images", dims = c(2048, 2048, length(stacks), length(channels), length(fields)),
H5type = "H5T_NATIVE_UINT16", chunk = c(hdf5_chunksize, hdf5_chunksize, 1, 1, 1), level = hdf5_compression)
dataset_made
donor = substr(x = platename, 1, 4)
site = substr(x = platename, 5, 7)
plateid = substr(x = platename, 8, 11)
layout = substr(x = platename, 12, 14)
well = paste0(row, col)
channels_string = paste0(channels, collapse = "_")
infoimg = suppressWarnings(readTIFF(filenames[1], info = TRUE))
resolution.x = attr(infoimg, "x.resolution")
resolution.y = attr(infoimg, "y.resolution")
resolution.unit = attr(infoimg, "resolution.unit")
timestamp = attr(infoimg, "date.time")
library(tiff)
donor = substr(x = platename, 1, 4)
site = substr(x = platename, 5, 7)
plateid = substr(x = platename, 8, 11)
layout = substr(x = platename, 12, 14)
well = paste0(row, col)
channels_string = paste0(channels, collapse = "_")
infoimg = suppressWarnings(readTIFF(filenames[1], info = TRUE))
resolution.x = attr(infoimg, "x.resolution")
resolution.y = attr(infoimg, "y.resolution")
resolution.unit = attr(infoimg, "resolution.unit")
timestamp = attr(infoimg, "date.time")
filenames
plateIndir = "PROMISE-10x-4t-c-16z-2-channel_D026T11P004L11_1"
filenames = imageFilenames(plateIndir, platename, row, col, configdir)
# Check that all images are present
identifiers = expand.grid(fields, channels, stacks, stringsAsFactors = FALSE)
identifiers
filenames
h5FileName
donor = substr(x = platename, 1, 4)
site = substr(x = platename, 5, 7)
plateid = substr(x = platename, 8, 11)
layout = substr(x = platename, 12, 14)
well = paste0(row, col)
channels_string = paste0(channels, collapse = "_")
infoimg = suppressWarnings(readTIFF(filenames[1], info = TRUE))
resolution.x = attr(infoimg, "x.resolution")
resolution.y = attr(infoimg, "y.resolution")
resolution.unit = attr(infoimg, "resolution.unit")
timestamp = attr(infoimg, "date.time")
metadata = matrix(data = c("Donor", donor, "Site", site, "Plate", plateid, "Layout", layout, "Well", well, "Channels", channels_string,
"Resolution.X", resolution.x, "Resolution.Y", resolution.y, "Resolution.units", resolution.unit,
"Timestamp", timestamp, "PackageVersion", as.character(packageVersion("PROMISE"))),
ncol = 2, byrow = TRUE)
filenames[1]
file.exists(filenames[1])
filenames
identifiers
stacks
platename = "D026T11P004L11"
rm(platename)
plateIndir = "PROMISE-10x-4t-c-16z-2-channel_D026T11P004L11_1"
configdir = "/collab-ag-fischer/PROMISE/data-10x-4t-c-16z/configdir"
source(file.path(configdir, "watchdogConfig.R"))
filenames = imageFilenames(plateIndir, platename, row, col, configdir)
plateIndir
indir
full_path = file.path(indir, plateIndir)
full_path
filenames = list.files(full_path)
filenames
full_path
filenames = list.files(full_path)
filenames
dir.exists(full_path)
file.exists(full_path)
filenames = list.files(full_path)
length(filenames)
filenames
full_path = file.path(indir, plateIndir)
# filenames = list.files(full_path)
# DEV
filenames = c("P - 4(fld 1 wv UV - DAPI z 10).tif",
"P - 4(fld 1 wv UV - DAPI z 11).tif",
"K - 4(fld 1 wv UV - DAPI z 1).tif",
"K - 4(fld 1 wv UV - DAPI z 2).tif")
filename = filenames[1]
library(stringr)
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "0\1")
str_locate(string = filename, pattern = "[0-9]{1}\\(")
str_locate_all(string = filename, pattern = "[0-9]{1}\\(")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "\1")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "Yo")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "Yo(")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "0\\1")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "0\\0")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "0\0")
str_replace(string = filename, pattern = "[0-9]{1}\\(", replacement = "0\\0")
str_replace(string = filenames, pattern = "[0-9]{1}\\(", replacement = "0\\0")
filenames
# filenames = list.files(full_path)
# DEV
filenames = c("P - 14(fld 1 wv UV - DAPI z 10).tif",
"P - 5(fld 1 wv UV - DAPI z 11).tif",
"K - 3(fld 1 wv UV - DAPI z 1).tif",
"K - 24(fld 1 wv UV - DAPI z 2).tif")
str_replace(string = filenames, pattern = "[0-9]{1}\\(", replacement = "0\\0")
str_replace(string = filenames, pattern = " [0-9]{1}\\(", replacement = "0\\0")
str_replace(string = filenames, pattern = " [0-9]{1}\\(", replacement = " 0\\0")
str_replace(string = filenames, pattern = " ([0-9]{1})\\(", replacement = " 0\\0")
str_replace(string = filenames, pattern = " ([0-9]{1})\\(", replacement = "0\\0")
str_replace(string = filenames, pattern = " ([0-9]{1})\\(", replacement = "0\\1")
str_replace(string = filenames, pattern = "([0-9]{1})\\(", replacement = "0\\1")
str_locate("Hello WOrld", " ")
str_match(string = filename, pattern = " ([0-9]{1})\\(")
str_match(string = filename, pattern = " ([0-9]{1})(\\()")
str_match(string = filenames, pattern = " ([0-9]{1})(\\()")
str_replace_all(string = filename, pattern = " ([0-9]{1})\\(", replacement = "0\\1")
str_replace_all(string = filename, pattern = " ([0-9]{1})\\(", replacement = "0\\1(")
str_replace_all(string = filename, pattern = " ([0-9]{1})(\\()", replacement = "0\\1(")
str_replace_all(string = filename, pattern = " ([0-9]{1})(\\()", replacement = c("pattern1" = "0\\1("))
str_replace_all(string = filename, pattern = " ([0-9]{1})(\\()", replacement = c("pattern1" = "0\\1"))
str_replace_all(string = filename, pattern = " ([0-9]{1})(\\()", replacement = c("[0-9]{1}" = "0\\1"))
str_replace_all(string = filename, pattern = " ([0-9]{1})(\\()", replacement = c("[0-9]{1}" = " 0\\1"))
str_replace(string = filenames, pattern = " ([0-9]{1})\\(", replacement = " 0\\1(")
str_replace(string = filenames, pattern = " ([0-9]{1})(", replacement = " 0\\1(")
str_replace(string = filenames, pattern = " ([0-9]{1})\\(", replacement = " 0\\1\\(")
filenames
filenames
filenames2 = str_replace(string = filenames, pattern = "- ([0-9]{1})\\(", replacement = "- 0\\1\\(")
filenames2
filenames2 = str_replace(string = filenames, pattern = "- ([0-9]{1})\\(", replacement = "- 0\\1(")
filenames3 = str_replace(string = filenames, pattern = "z ([0-9]{1})\\)", replacement = "z 0\\1(")
filenames3
filenames3 = str_replace(string = filenames, pattern = "z ([0-9]{1})\\)", replacement = "z 0\\1)")
filenames3
library(PROMISE)
library(stringr)
source(file.path(configdir, "watchdogConfig.R"))
plateIndir = "PROMISE-10x-4t-c-16z-2-channel_D026T11P004L11_1"
configdir = "/collab-ag-fischer/PROMISE/data-10x-4t-c-16z/configdir"
source(file.path(configdir, "watchdogConfig.R"))
full_path = file.path(indir, plateIndir)
# filenames = list.files(full_path)
# DEV
filenames = c("P - 14(fld 1 wv UV - DAPI z 10).tif",
"P - 5(fld 1 wv UV - DAPI z 11).tif",
"K - 3(fld 1 wv UV - DAPI z 1).tif",
"K - 24(fld 1 wv UV - DAPI z 2).tif")
# filenames = list.files(full_path)
# DEV
filenames = c("P - 14(fld 1 wv UV - DAPI z 10).tif",
"P - 5(fld 1 wv UV - DAPI z 11).tif",
"K - 3(fld 1 wv UV - DAPI z 1).tif",
"K - 24(fld 1 wv UV - DAPI z 2).tif")
filenames_new = str_replace(
string = filenames, pattern = "- ([0-9]{1})\\(", replacement = "- 0\\1(")
filenames_new = str_replace(
string = filenames_new, pattern = "z ([0-9]{1})\\)",
replacement = "z 0\\1)")
filenames_new
full_paths_old = file.path(indir, plateIndir, filenames)
full_paths_old
file.exists(full_paths_old)
full_paths_new = file.path(indir, plateIndir, filenames_new)
full_paths_new
file.exists(full_paths_new)
# Keep only changed file names
sel_indicies = !file.exists(full_paths_new)
sel_indicies
# Keep only changed file names
sel_indicies = !file.exists(full_paths_new)
full_paths_old = full_paths_old[sel_indicies]
full_paths_new = full_paths_new[sel_indicies]
full_paths_old
full_paths_new
file.exists(full_paths_new)
file.exists(full_paths_old)
file.symlink(from = full_paths_old, full_paths_new)
output = file.symlink(from = full_paths_old, full_paths_new)
output
all(output)
16*24*4*16*2
library(PROMISE)
plateIndir = "NAN"
platename = "D026T11P004L11"
row = "A"
col = "01"
configdir = "/collab-ag-fischer/PROMISE/data-10x-4t-c-16z/configdir"
source(file.path(configdir, "watchdogConfig.R"))
# Load input images
inputFile = projectionHdf5Filename(filedir = file.path(hdf5projection, platename), platename = platename, row = row, col = col, configdir = configdir)
inputFile
metadata = h5read(file = inputFile, name = "metadata")
library(EBImage)
library(rhdf5)
metadata = h5read(file = inputFile, name = "metadata")
Img = h5read(inputFile, name="images")
dim(Img)
if(length(dim(Img)) != 4) {
warning("The package expects data with 4 dimensions: [x, y, channels, fields]")
return(FALSE)
}
# Quantile-truncate and normalize each channel separately
for(c in seq_len(dim(Img)[3])) {
Img[,,c,] = pmax(Img[,,c,] - median(Img[,,c,]), 0)
Img[,,c,] = pmin(Img[,,c,], quantile(Img[,,c,], 0.999))
Img[,,c,] = normalize(Img[,,c,])
}
dim(Img2)
dim(Img)
Img2 = resize(Img, w = 2048 / 8, h = 2048 / 8)
dim(Img)
dim(Img2)
display(Img2[,,1,1])
display(Img2[,,2,1])
display(Img2[,,1,1])
display(Img2[,,2,1])
display(Img2[,,1,2])
display(Img2[,,2,2])
Img3 = rgbImage(tile(Img2[,,1,as.integer(fields_layout)], nx = sqrt(length(fields))),
tile(Img2[,,2,as.integer(fields_layout)], nx = sqrt(length(fields))),
tile(Img2[,,3,as.integer(fields_layout)], nx = sqrt(length(fields))))
dim(Imgs2)
dim(Img2)
dim(Img2)[3] == 2
tmp = abind(
Img2[,,1,],
Img2[,,2,], along = 3)
dim(tmp)
tmp = abind(
Img2[,,1,drop=F],
Img2[,,2,drop=F], along = 3)
dim(Imgs[,,1,])
dim(Img2[,,1,])
dim(Img2[,,1,,drop=F])
tmp = abind(
Img2[,,1,,drop=FALSE],
Img2[,,2,,drop=FALSE], along = 3)
identical(tmp, Img2)
dim(tmp)
dim(Img)
dim(Img2)
sum(tmp != Img2)
class(tmp)
class(Img2)
dim(array(data = 0, dim = dim(Img2[,,1,,drop=FALSE]))
dim(array(data = 0, dim = dim(Img2[,,1,,drop=FALSE])))
Img2 = resize(Img, w = 2048 / 8, h = 2048 / 8)
# If Img2 has only two channels then insert a blank green channel
if(dim(Img2)[3] == 2) {
Img2 = abind(
Img2[,,1,,drop=FALSE],
array(data = 0, dim = dim(Img2[,,1,,drop=FALSE])),
Img2[,,2,,drop=FALSE], along = 3)
}
dim(Img2)
Img3 = rgbImage(tile(Img2[,,1,as.integer(fields_layout)], nx = sqrt(length(fields))),
tile(Img2[,,2,as.integer(fields_layout)], nx = sqrt(length(fields))),
tile(Img2[,,3,as.integer(fields_layout)], nx = sqrt(length(fields))))
Img2 = resize(Img, w = 2048 / 64, h = 2048 / 64)
if(dim(Img2)[3] == 2) {
Img2 = abind(
Img2[,,1,,drop=FALSE],
array(data = 0, dim = dim(Img2[,,1,,drop=FALSE])),
Img2[,,2,,drop=FALSE], along = 3)
}
Img4 = rgbImage(tile(Img2[,,1,as.integer(fields_layout)], nx = sqrt(length(fields))),
tile(Img2[,,2,as.integer(fields_layout)], nx = sqrt(length(fields))),
tile(Img2[,,3,as.integer(fields_layout)], nx = sqrt(length(fields))))
dim(Img3)
dim(Img4)
display(Img3)
display(Img4)
display(Img3)
H5close()
if (!file.exists(file.path(htmldir, platename))) {
dir.create(file.path(htmldir, platename), showWarnings = FALSE, recursive = TRUE)
}
if (row == "A" & col == "01") {
makeIndexPage(platename, configdir)
}
fn1 = thumbnailFilename(filedir = file.path(htmldir, platename), platename = platename, row = row, col = col, configdir = configdir, level=1)
writeImage(Img3, fn1, quality = 99)
fn2 = thumbnailFilename(filedir = file.path(htmldir, platename), platename = platename, row = row, col = col, configdir = configdir, level=2)
writeImage(Img4, fn2, quality = 99)
library(PROMISE)
lsf.str("package:PROMISE")
workflows = grep("^PROMISE", as.vector(lsf.str("package:PROMISE")), value = TRUE)
workflows
custom_function = PROMISEprojectionOnly
custom_function %in% workflows
custom_function = "PROMISEprojectionOnly"
custom_function %in% workflows
